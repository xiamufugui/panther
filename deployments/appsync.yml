# Panther is a Cloud-Native SIEM for the Modern Security Team.
# Copyright (C) 2020 Panther Labs Inc
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

AWSTemplateFormatVersion: 2010-09-09
Description: AppSync data sources and resolvers

# The bare appsync instance is defined in bootstrap.yml so we can get its value sooner in the deploy process.
# This template adds all the configuration: schema, data sources, resolvers

Parameters:
  # Alphabetize parameters so it's easy to compare side-by-side with other code that passes values
  # and because the CloudFormation console always shows parameters in alphabetical order.
  AlarmTopicArn:
    Type: String
    Description: SNS topic for CloudWatch alarms
    # Example: "arn:aws:sns:us-west-2:111122223333:panther-cw-alarms"
    AllowedPattern: '^arn:(aws|aws-cn|aws-us-gov):sns:[a-z]{2}-[a-z]{4,9}-[1-9]:\d{12}:\S+$'
  ApiId:
    Type: String
    Description: Appsync GraphQL API ID
    # Example: "hen4qu3cpjgmdmxltuzand5kjm"
    AllowedPattern: '^[a-z0-9]{10,50}$'
  CustomResourceVersion:
    Type: String
    Description: Forces updates to custom resources when changed
    MinLength: 1
  ServiceRole:
    Type: String
    Description: Appsync IAM service role ARN
    # Example: "arn:aws:iam::111122223333:role/panther-bootstrap-AppsyncServiceRole-3NCFADATNZGN"
    AllowedPattern: '^arn:(aws|aws-cn|aws-us-gov):iam::\d{12}:role\/\S+$'

Mappings:
  ResponseTemplates:
    Lambda: # Standard Lambda function error handling
      VTL: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #else
          $util.toJson($ctx.result)
        #end
    LambdaStatusCode: # Standard error handling for Lambda functions which return http status codes
      VTL: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #elseif($statusCode >= 200 && $statusCode < 300)
          $ctx.result.body
        #else
          $util.error($ctx.result.body, "$statusCode", $ctx.args)
        #end
    LambdaStatusCodeNoBody:
      VTL: |
        #set ($statusCode = $ctx.result.statusCode)
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #elseif($statusCode >= 200 && $statusCode < 300)
          true
        #else
          $util.error($ctx.result.body, "$statusCode", $ctx.args)
        #end

Resources:
  AppsyncAlarms:
    Type: Custom::AppSyncAlarms
    Properties:
      ApiId: !Ref ApiId
      ApiName: panther-graphql-api
      AlarmTopicArn: !Ref AlarmTopicArn
      ClientErrorThreshold: 20 # per 5-minute window
      CustomResourceVersion: !Ref CustomResourceVersion
      ServiceToken: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-cfn-custom-resources

  GraphQLSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      DefinitionS3Location: ../api/graphql/schema.graphql

  ########## Data Sources ##########
  AlertDeliveryAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherAlertDeliveryAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-alert-delivery-api

  AlertsAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherAlertsAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-alerts-api

  UsersAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherUsersAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-users-api

  DestinationsAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherDestinationsAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-outputs-api

  SourceAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherSourceAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-source-api

  OrganizationAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherOrganizationAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-organization-api

  MetricsAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherMetricsAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-metrics-api

  LogTypesAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherLogTypesAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-logtypes-api

  ComplianceAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherComplianceAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-compliance-api

  RemediationAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherRemediationAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-remediation-api

  ResourcesAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherResourcesAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-resources-api

  AnalysisAPILambdaDataSource:
    Type: AWS::AppSync::DataSource
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      Name: PantherAnalysisAPILambda
      Type: AWS_LAMBDA
      ServiceRoleArn: !Ref ServiceRole
      LambdaConfig:
        LambdaFunctionArn: !Sub arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:panther-analysis-api

  ########## Resolvers ##########

  ResetUserPasswordResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: resetUserPassword
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "resetUserPassword": {
              "requesterId": $ctx.identity.username,
              "id": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateUser
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("requesterId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateUser": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  DeleteUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteUser
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "removeUser": {
              "requesterId": $ctx.identity.username,
              "id": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #else
          true
        #end

  ListUsersResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: users
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listUsers": {}
          })
        }
      ResponseMappingTemplate: |
        #if( $ctx.error )
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, {})
        #else
          $util.toJson($ctx.result.users)
        #end

  InviteUserResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: inviteUser
      DataSourceName: !GetAtt UsersAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("requesterId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "inviteUser": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  GetDestinationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: destination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getOutput": {
              "outputId": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  ListDestinationsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: destinations
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getOutputs": {}
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  AddDestinationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addDestination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "addOutput": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  DeleteDestinationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteDestination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteOutput": {
              "outputId": $ctx.args.id,
              "force": true
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateDestinationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateDestination
      DataSourceName: !GetAtt DestinationsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateOutput": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  ListComplianceIntegrationsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listComplianceIntegrations
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listIntegrations": {
              "integrationType": "aws-scan"
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  ListLogIntegrationsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listLogIntegrations
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listIntegrations": {}
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, {})
        #else
          #set($logIntegrations = [])
          #foreach($item in $ctx.result)
            #if ($item.integrationType == "aws-s3")
              $util.qr($item.put("__typename", "S3LogIntegration"))
              $util.qr($logIntegrations.add($item))
            #elseif ($item.integrationType == "aws-sqs")
              $util.qr($item.put("__typename", "SqsLogSourceIntegration"))
              $util.qr($logIntegrations.add($item))
            #end
          #end
          $util.toJson($logIntegrations)
        #end

  ComplianceIntegrationHealthFieldResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: ComplianceIntegration
      FieldName: health
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = {})
        $util.qr($input.put("integrationType", "aws-scan"))
        $util.qr($input.put("awsAccountId", $ctx.source.awsAccountId))
        $util.qr($input.put("integrationLabel", $ctx.source.integrationLabel))
        #if($ctx.source.cweEnabled)
          $util.qr($input.put("enableCWESetup", true))
        #end
        #if($ctx.source.remediationEnabled)
          $util.qr($input.put("enableRemediation", true))
        #end
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "integrationHealthCheck": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  GetComplianceIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getComplianceIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listIntegrations": {
              "integrationType": "aws-scan"
            }
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, {})
        #else
          #set ($requestedIntegration = "null")
          #foreach($item in $ctx.result)
            #if($item.integrationId == $ctx.args.id)
              #set ($requestedIntegration = $item)
            #end
          #end
          $util.toJson($requestedIntegration)
        #end

  GetS3LogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getS3LogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listIntegrations": {
              "integrationType": "aws-s3"
            }
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, {})
        #else
          #set ($requestedIntegration = "null")
          #foreach($item in $ctx.result)
            #if($item.integrationId == $ctx.args.id)
              #set ($requestedIntegration = $item)
            #end
          #end
          $util.toJson($requestedIntegration)
        #end

  GetSqsLogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getSqsLogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listIntegrations": {
              "integrationType": "aws-sqs"
            }
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, {})
        #else
          #set ($requestedIntegration = "null")
          #foreach($item in $ctx.result)
            #if($item.integrationId == $ctx.args.id)
              #set ($requestedIntegration = $item)
            #end
          #end
          $util.toJson($requestedIntegration)
        #end

  S3LogIntegrationHealthFieldResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: S3LogIntegration
      FieldName: health
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = {})
        $util.qr($input.put("integrationType", "aws-s3"))
        $util.qr($input.put("awsAccountId", $ctx.source.awsAccountId))
        $util.qr($input.put("integrationLabel", $ctx.source.integrationLabel))
        $util.qr($input.put("s3Bucket", $ctx.source.s3Bucket))
        $util.qr($input.put("s3Prefix", $ctx.source.s3Prefix))
        $util.qr($input.put("kmsKey", $ctx.source.kmsKey))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "integrationHealthCheck": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  SqsLogIntegrationHealthFieldResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: SqsLogSourceIntegration
      FieldName: health
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = {})
        $util.qr($input.put("integrationType", "aws-sqs"))
        $util.qr($input.put("integrationLabel", $ctx.source.integrationLabel))
        $util.qr($input.put("sqsConfig", $ctx.source.sqsConfig))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "integrationHealthCheck": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  GetComplianceIntegrationTemplateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getComplianceIntegrationTemplate
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("integrationType", "aws-scan"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getIntegrationTemplate": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  GetS3LogIntegrationTemplateResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getS3LogIntegrationTemplate
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("integrationType", "aws-s3"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getIntegrationTemplate": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  AddComplianceIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addComplianceIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        $util.qr($input.put("scanIntervalMins", 1440))
        $util.qr($input.put("integrationType", "aws-scan"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "putIntegration": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  AddS3LogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addS3LogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        $util.qr($input.put("integrationType", "aws-s3"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "putIntegration": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  AddSqsLogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLSchema
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addSqsLogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        #set($data = {
          "userId": $ctx.identity.sub,
          "integrationType": "aws-sqs",
          "integrationLabel": $input.integrationLabel,
          "sqsConfig": $input.sqsConfig
        })
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "putIntegration": $data
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateComplianceIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateComplianceIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("integrationType", "aws-scan"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateIntegrationSettings": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateS3LogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateS3LogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("integrationType", "aws-s3"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateIntegrationSettings": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateSqsLogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateSqsLogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("integrationType", "aws-sqs"))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateIntegrationSettings": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  DeleteComplianceIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteComplianceIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteIntegration": {
              "integrationId": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  DeleteLogIntegrationResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteLogIntegration
      DataSourceName: !GetAtt SourceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteIntegration": {
              "integrationId": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  GetGeneralSettingsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: generalSettings
      DataSourceName: !GetAtt OrganizationAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getSettings": {}
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateGeneralSettingsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateGeneralSettings
      DataSourceName: !GetAtt OrganizationAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateSettings": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  ListPoliciesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: policies
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listPolicies": $util.defaultIfNull($ctx.args.input, {})
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  GetPolicyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: policy
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getPolicy": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  UpdatePolicyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updatePolicy
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updatePolicy": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  AddPolicyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addPolicy
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "createPolicy": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  DeletePolicyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deletePolicy
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deletePolicies": {
              "entries": $ctx.args.input.policies
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCodeNoBody, VTL]

  UploadDetectionsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: uploadDetections
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "bulkUpload": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  ListResourcesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: resources
      DataSourceName: !GetAtt ResourcesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listResources": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  GetResourceResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: resource
      DataSourceName: !GetAtt ResourcesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getResource": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  RemediateResourceResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: remediateResource
      DataSourceName: !GetAtt RemediationAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "remediateResource": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCodeNoBody, VTL]

  ListRemediationsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: remediations
      DataSourceName: !GetAtt RemediationAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listRemediations": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  OrganizationStatsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: organizationStats
      DataSourceName: !GetAtt ComplianceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getOrgOverview": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  LogAnalysisMetricsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getLogAnalysisMetrics
      DataSourceName: !GetAtt MetricsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getMetrics": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, {})
        #else
          #set($response = {
            "eventsProcessed": $ctx.result.eventsProcessed.seriesData,
            "alertsBySeverity": $ctx.result.alertsBySeverity.seriesData,
            "eventsLatency": $ctx.result.eventsLatency.seriesData,
            "totalAlertsDelta": $ctx.result.totalAlertsDelta.singleValue,
            "alertsByRuleID": $ctx.result.alertsByRuleID.singleValue,
            "fromDate": $ctx.result.fromDate,
            "toDate": $ctx.result.toDate,
            "intervalMinutes": $ctx.result.intervalMinutes
          })
          $util.toJson($response)
        #end

  ResourcesForPolicyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: resourcesForPolicy
      DataSourceName: !GetAtt ComplianceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "describePolicy": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  PoliciesForResourceResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: policiesForResource
      DataSourceName: !GetAtt ComplianceAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "describeResource": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  SuppressPoliciesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: suppressPolicies
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "suppress": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCodeNoBody, VTL]

  ListRulesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: rules
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listRules": $util.defaultIfNull($ctx.args.input, {})
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  GetRuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: rule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getRule": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  UpdateRuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateRule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateRule": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  AddRuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addRule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "createRule": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  DeleteRuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteRule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteRules": {
              "entries": $ctx.args.input.rules
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCodeNoBody, VTL]

  GetGlobalModuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getGlobalPythonModule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getGlobal": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  UpdateGlobalModuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateGlobalPythonlModule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateGlobal": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  ListGlobalPythonModulesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listGlobalPythonModules
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listGlobals": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  AddGlobalPythonModuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addGlobalPythonModule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $ctx.args.input)
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "createGlobal": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  DeleteGlobalPythonModuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteGlobalPythonModule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteGlobals": {
              "entries": $ctx.args.input.globals
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCodeNoBody, VTL]

  SendTestAlertResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: sendTestAlert
      DataSourceName: !GetAtt AlertDeliveryAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "sendTestAlert": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  DeliverAlertResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deliverAlert
      DataSourceName: !GetAtt AlertDeliveryAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deliverAlert": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  ListAlertsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: alerts
      DataSourceName: !GetAtt AlertsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listAlerts": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #else
          #set($alerts = [])

          #foreach($item in $ctx.result.alertSummaries)
            #set($alert = $item)
            #if ($item.type == "POLICY")
              $util.qr($alert.put("detection", {
                "__typename": "AlertSummaryPolicyInfo",
                "policyId": $item.policyId,
                "policySourceId": $item.policySourceId,
                "resourceId": $item.resourceId,
                "resourceTypes": $item.resourceTypes
              }))
            #else
              $util.qr($alert.put("detection", {
                "__typename": "AlertSummaryRuleInfo",
                "ruleId": $item.ruleId,
                "logTypes": $item.logTypes,
                "eventsMatched": $item.eventsMatched
              }))
            #end
            $util.qr($alerts.add($alert))
          #end
          $util.toJson({
          	"alertSummaries": $alerts,
            "lastEvaluatedKey": $ctx.result.lastEvaluatedKey
          })
        #end

  GetAlertResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: alert
      DataSourceName: !GetAtt AlertsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getAlert": $ctx.args.input
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #else
          #set($payload = $ctx.result)
          #if ($payload.type == "POLICY")
            $util.qr($payload.put("detection", {
              "__typename": "AlertSummaryPolicyInfo",
              "policyId": $ctx.result.policyId,
              "policySourceId": $ctx.result.policySourceId,
              "resourceId": $ctx.result.resourceId,
              "resourceTypes": $ctx.result.resourceTypes
            }))
          #else
            $util.qr($payload.put("detection", {
              "__typename": "AlertDetailsRuleInfo",
              "ruleId": $ctx.result.ruleId,
              "logTypes": $ctx.result.logTypes,
              "eventsMatched": $ctx.result.eventsMatched,
              "dedupString": $ctx.result.dedupString,
              "events": $ctx.result.events,
              "eventsLastEvaluatedKey": $ctx.result.eventsLastEvaluatedKey
            }))
          #end
          $util.toJson($payload)
        #end

  UpdateAlertStatusResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateAlertStatus
      DataSourceName: !GetAtt AlertsAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateAlertStatus": $input
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #else
          #set($alerts = [])

          #foreach($item in $ctx.result)
            #set($alert = $item)
            #if ($item.type == "POLICY")
              $util.qr($alert.put("detection", {
                "__typename": "AlertSummaryPolicyInfo",
                "policyId": $item.policyId,
                "policySourceId": $item.policySourceId,
                "resourceId": $item.resourceId,
                "resourceTypes": $item.resourceTypes
              }))
            #else
              $util.qr($alert.put("detection", {
                "__typename": "AlertSummaryRuleInfo",
                "ruleId": $item.ruleId,
                "logTypes": $item.logTypes,
                "eventsMatched": $item.eventsMatched
              }))
            #end
            $util.qr($alerts.add($alert))
          #end
          $util.toJson($alerts)
        #end

  TestPolicyResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: testPolicy
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "testPolicy": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  TestRuleResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: testRule
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
           "version" : "2017-02-28",
           "operation": "Invoke",
           "payload": $util.toJson({
             "testRule": $ctx.args.input
           })
         }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  LogTypesResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listAvailableLogTypes
      DataSourceName: !GetAtt LogTypesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "ListAvailableLogTypes": {}
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  AddCustomLogResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addCustomLog
      DataSourceName: !GetAtt LogTypesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "PutCustomLog": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  UpdateCustomLogResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateCustomLog
      DataSourceName: !GetAtt LogTypesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "PutCustomLog": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  GetCustomLogResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getCustomLog
      DataSourceName: !GetAtt LogTypesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "GetCustomLog": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  ListCustomLogsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listCustomLogs
      DataSourceName: !GetAtt LogTypesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "ListCustomLogs": {}
          })
        }
      ResponseMappingTemplate: |
        #if($ctx.error)
          $util.error($ctx.error.errorMessage, $ctx.error.errorType, $ctx.args)
        #else
          $util.toJson($ctx.result.customLogs)
        #end

  DeleteCustomLogResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteCustomLog
      DataSourceName: !GetAtt LogTypesAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "DelCustomLog": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, Lambda, VTL]

  AddDataModelResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: addDataModel
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "createDataModel": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  UpdateDataModelResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: updateDataModel
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        #set ($input = $util.defaultIfNull($ctx.args.input, {}))
        $util.qr($input.put("userId", $ctx.identity.username))
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "updateDataModel": $input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  GetDataModelResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: getDataModel
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "getDataModel": {
              "id": $ctx.args.id
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  ListDataModelsResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Query
      FieldName: listDataModels
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "listDataModels": $ctx.args.input
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCode, VTL]

  DeleteDataModelResolver:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !Ref ApiId
      TypeName: Mutation
      FieldName: deleteDataModel
      DataSourceName: !GetAtt AnalysisAPILambdaDataSource.Name
      RequestMappingTemplate: |
        {
          "version" : "2017-02-28",
          "operation": "Invoke",
          "payload": $util.toJson({
            "deleteDataModels": {
              "entries": $ctx.args.input.dataModels
            }
          })
        }
      ResponseMappingTemplate: !FindInMap [ResponseTemplates, LambdaStatusCodeNoBody, VTL]
